{"slots":{"0":{"name":"Screen","type":{"events":[],"methods":[]}},"1":{"name":"Core","type":{"events":[],"methods":[]}},"2":{"name":"Industry1","type":{"events":[],"methods":[]}},"3":{"name":"Industry2","type":{"events":[],"methods":[]}},"4":{"name":"Industry3","type":{"events":[],"methods":[]}},"5":{"name":"Industry4","type":{"events":[],"methods":[]}},"6":{"name":"Industry5","type":{"events":[],"methods":[]}},"7":{"name":"Industry6","type":{"events":[],"methods":[]}},"8":{"name":"Industry7","type":{"events":[],"methods":[]}},"9":{"name":"Industry8","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"--getPosition\nIndustryVec = IndustryVec\n\n--system.print(output)\n\n-- INDUSTRY 1\nif output == 'INDUSTRY1' then\n   IndustryVec = vec3(Industrys[1][1].getPosition())\n   IndustryBoundVex = vec3(Industrys[1][1].getBoundingBoxSize())\nelseif output == 'START1' then\n   Industrys[1][1].startRun()\nelseif output == 'SOFTSTOP1' then\n   Industrys[1][1].stop(false, false)\nelseif output == 'HARDSTOP1' then\n   Industrys[1][1].stop(false, true)\nelseif output == 'UPDATEBANK1' then\n   Industrys[1][3] = Industrys[1][1].updateBank()\nend\n\n-- INDUSTRY 2\nif output == 'INDUSTRY2' then\n   IndustryVec = vec3(Industrys[2][1].getPosition())\n   IndustryBoundVex = vec3(Industrys[2][1].getBoundingBoxSize())\nelseif output == 'START2' then\n   Industrys[2][1].startRun()\nelseif output == 'SOFTSTOP2' then\n   Industrys[2][1].stop(false, false)\nelseif output == 'HARDSTOP2' then\n   Industrys[2][1].stop(false, true)\nelseif output == 'UPDATEBANK2' then\n   Industrys[2][3] = Industrys[2][1].updateBank()\nelseif output == 'MAINTAIN2' then\n   Industrys[2][3].startMaintain(nextMaintian)\nelseif output == 'BATCH2' then\n   Industrys[2][3].startFor(nextBatch)\nend\n\n-- INDUSTRY 3\nif output == 'INDUSTRY3' then\n   IndustryVec = vec3(Industrys[3][1].getPosition())\n   IndustryBoundVex = vec3(Industrys[3][1].getBoundingBoxSize())\nelseif output == 'START3' then\n   Industrys[3][1].startRun()\nelseif output == 'SOFTSTOP3' then\n   Industrys[3][1].stop(false, false)\nelseif output == 'HARDSTOP3' then\n   Industrys[3][1].stop(false, true)\nelseif output == 'UPDATEBANK3' then\n   Industrys[3][3] = Industrys[3][1].updateBank()\nend\n\n-- INDUSTRY 4\nif output == 'INDUSTRY4' then\n   IndustryVec = vec3(Industrys[4][1].getPosition())\n   IndustryBoundVex = vec3(Industrys[4][1].getBoundingBoxSize())\nelseif output == 'START4' then\n   Industrys[4][1].startRun()\nelseif output == 'SOFTSTOP4' then\n   Industrys[4][1].stop(false, false)\nelseif output == 'HARDSTOP4' then\n   Industrys[4][1].stop(false, true)\nelseif output == 'UPDATEBANK4' then\n   Industrys[4][3] = Industrys[4][1].updateBank()\nend\n\n-- INDUSTRY 5\nif output == 'INDUSTRY5' then\n   IndustryVec = vec3(Industrys[5][1].getPosition())\n   IndustryBoundVex = vec3(Industrys[5][1].getBoundingBoxSize())\nelseif output == 'START5' then\n   Industrys[5][1].startRun()\nelseif output == 'SOFTSTOP5' then\n   Industrys[5][1].stop(false, false)\nelseif output == 'HARDSTOP5' then\n   Industrys[5][1].stop(false, true)\nelseif output == 'UPDATEBANK5' then\n   Industrys[5][3] = Industrys[5][1].updateBank()\nend\n\n-- INDUSTRY 6\nif output == 'INDUSTRY6' then\n   IndustryVec = vec3(Industrys[6][1].getPosition())\n   IndustryBoundVex = vec3(Industrys[6][1].getBoundingBoxSize())\nelseif output == 'START6' then\n   Industrys[6][1].startRun()\nelseif output == 'SOFTSTOP6' then\n   Industrys[6][1].stop(false, false)\nelseif output == 'HARDSTOP6' then\n   Industrys[6][1].stop(false, true)\nelseif output == 'UPDATEBANK6' then\n   Industrys[6][3] =  Industrys[6][1].updateBank()\nend\n\n-- INDUSTRY 7\nif output == 'INDUSTRY7' then\n   IndustryVec = vec3(Industrys[7][1].getPosition())\n   IndustryBoundVex = vec3(Industrys[7][1].getBoundingBoxSize())\nelseif output == 'START7' then\n    Industrys[7][1].startRun()\nelseif output == 'SOFTSTOP7' then\n   Industrys[7][1].stop(false, false)\nelseif output == 'HARDSTOP7' then\n   Industrys[7][1].stop(false, true)\nelseif output == 'UPDATEBANK7' then\n   Industrys[7][3] = Industrys[7][1].updateBank()\nend\n\n-- INDUSTRY 8\nif output == 'INDUSTRY8' then\n   IndustryVec = vec3(Industrys[8][1].getPosition())\n   IndustryBoundVex = vec3(Industrys[8][1].getBoundingBoxSize())\nelseif output == 'START8' then\n    Industrys[8][1].startRun()\nelseif output == 'SOFTSTOP8' then\n   Industrys[8][1].stop(false, false)\nelseif output == 'HARDSTOP8' then\n   Industrys[8][1].stop(false, true)\nelseif output == 'UPDATEBANK8' then\n   Industrys[8][3] = Industrys[8][1].updateBank()\nend\n\n\n-- Delete Sticker\nif SelectedStickerID ~= nil then\n   Core.deleteSticker(SelectedStickerID)\nend\n\nif IndustryVec ~= nil then\n   SelectedStickerID = Core.spawnArrowSticker(IndustryVec.x,IndustryVec.y,IndustryVec.z + 10,\"down\")    \nend\n\nScreen.clearScriptOutput()","filter":{"args":[{"variable":"*"}],"signature":"onOutputChanged(output)","slotKey":"0"},"key":"0"},{"code":"tick = tick + 1\nlocal industry = nil\nlocal industryName = nil\nlocal TotalIndustry\n\n\nif tick == 1 then\n    industry = GetIndustry(Industrys[tick][1],1)\n    industryName = Industrys[tick][2]\nelseif tick == 2 then\n    industry = GetIndustry(Industrys[tick][1],2)\n    industryName = Industrys[tick][2]\nelseif tick == 3 then\n    industry = GetIndustry(Industrys[tick][1],3)\n    industryName = Industrys[tick][2]\nelseif tick == 4 then\n    industry = GetIndustry(Industrys[tick][1],4)\n    industryName = Industrys[tick][2]\nelseif tick == 5 then\n    industry = GetIndustry(Industrys[tick][1],5)\n    industryName = Industrys[tick][2]\nelseif tick == 6 then\n    industry = GetIndustry(Industrys[tick][1],6)\n    industryName = Industrys[tick][2]\nelseif tick == 7 then\n    industry = GetIndustry(Industrys[tick][1],7)\n    industryName = Industrys[tick][2]\nelseif tick == 8 then\n    industry = GetIndustry(Industrys[tick][1],8)\n    industryName = Industrys[tick][2]\nend\n\nScreen.setScriptInput(IndustryCreateRenderInput(industry,tick,industryName))\n\nif tick == numIndustry then tick = 0 end","filter":{"args":[{"value":"screen"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"1"},{"code":"MasterPlayers = \"\" --export\nIndustryName1 = \"Industry 1\" --export\nIndustryName2 = \"Industry 2\" --export\nIndustryName3 = \"Industry 3\" --export\nIndustryName4 = \"Industry 4\" --export\nIndustryName5 = \"Industry 5\" --export\nIndustryName6 = \"Industry 6\" --export\nIndustryName7 = \"Industry 7\" --export\nIndustryName8 = \"Industry 8\" --export\n\nIndustrys = {}\nSelectedStickerID = nil\nSelectedPanel = nil\nIndustryVec = nil\nIndustryBoundVex = nil\nnumIndustry = 0\ntick = 0\nupdateTick = 0\narrowHeightModifier = 0\n\nnextMaintian = 0\nnextBatch = 0\n\n\nif Industry1 ~= nil then \n    numIndustry = numIndustry + 1\n    Industrys[numIndustry] = {}\n    Industrys[numIndustry][1] = Industry1\n    Industrys[numIndustry][2] = IndustryName1\nend\n\nif Industry2 ~= nil then \n    numIndustry = numIndustry + 1 \n    Industrys[numIndustry] = {}\n    Industrys[numIndustry][1] = Industry2\n    Industrys[numIndustry][2] = IndustryName2\nend\nif Industry3 ~= nil then \n    numIndustry = numIndustry + 1 \n    Industrys[numIndustry] = {}\n    Industrys[numIndustry][1] = Industry3\n    Industrys[numIndustry][2] = IndustryName3\nend\n\nif Industry4 ~= nil then \n    numIndustry = numIndustry + 1 \n    Industrys[numIndustry] = {}\n    Industrys[numIndustry][1] = Industry4\n    Industrys[numIndustry][2] = IndustryName4\nend\n\nif Industry5 ~= nil then \n    numIndustry = numIndustry + 1 \n    Industrys[numIndustry] = {}\n    Industrys[numIndustry][1] = Industry5\n    Industrys[numIndustry][2] = IndustryName5\nend\n\nif Industry6 ~= nil then \n    numIndustry = numIndustry + 1 \n    Industrys[numIndustry] = {}\n    Industrys[numIndustry][1] = Industry6\n    Industrys[numIndustry][2] = IndustryName6\nend\n\nif Industry7 ~= nil then \n    numIndustry = numIndustry + 1 \n    Industrys[numIndustry] = {}\n    Industrys[numIndustry][1] = Industry7\n    Industrys[numIndustry][2] = IndustryName7\nend\n\nif Industry8 ~= nil then \n    numIndustry = numIndustry + 1 \n    Industrys[numIndustry] = {}\n    Industrys[numIndustry][1] = Industry8\n    Industrys[numIndustry][2] = IndustryName8\nend\n\nunit.setTimer('screen',0.1)","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"2"},{"code":"for i=1, 25, 1 do Core.deleteSticker(i) end","filter":{"args":[],"signature":"onStop()","slotKey":"-1"},"key":"3"},{"code":"Screen.activate()\n\n","filter":{"args":[],"signature":"onStart()","slotKey":"-4"},"key":"4"},{"code":"updateTick = updateTick + 4.5\narrowHeightModifier = arrowHeightModifier + 0.075\n--IndustryBoundVex\nif SelectedStickerID ~= nil then\n    Core.rotateSticker(SelectedStickerID,0,0,updateTick)\n    Core.moveSticker(SelectedStickerID,IndustryVec.x,IndustryVec.y,IndustryVec.z + IndustryBoundVex.z + 8 - arrowHeightModifier)\nend\n\nif arrowHeightModifier > 8 then arrowHeightModifier = 0 end","filter":{"args":[],"signature":"onUpdate()","slotKey":"-4"},"key":"5"},{"code":"local ti = Split(text,' ')\n\nif ti[1] == \"MAINTAIN\" then\n   nextMaintian = tonumber(ti[2])\nelseif ti[1] == \"BATCH\" then\n    nextBatch = tonumber(ti[2])\nelse\n   system.print('UNKNOWN COMMAND')\nend","filter":{"args":[{"variable":"*"}],"signature":"onInputText(text)","slotKey":"-4"},"key":"6"},{"code":"function Ternary(condition,x,y) if condition then return x else return y end end\nfunction ToVec4(a,b,c,d) return {x = a, y = b, z = c, r = d} end\nfunction ToColor(w,x,y,z) return {r = w, g = x, b = y, o = z} end\n\nfunction Split(s, delimiter)\n    result = {};\n    for match in (s..delimiter):gmatch(\"(.-)\"..delimiter) do\n        table.insert(result, match);\n    end\n    return result;\nend\n\nfunction GetIndustry(this)\n   local info = this.getInfo()   \n   local t = {}\n    t.Efficiency = this.getEfficiency()\n    t.State = this.getState()\n    t.StopRequested = info.stopRequested\n    t.RemainingTime = info.remainingTime\n    t.CyclesCompleted = this.getCyclesCompleted()\n    t.Uptime = this.getUptime()\n    t.Outputs = GetOutput(this.getOutputs())\n    t.Inputs = GetInput(this.getInputs())\n    --this.updateBank()\n    t.Bank = GetBank(this.getBank())\n  return t\nend\n\nfunction IndustryToString(this)\n   local s = ''\n   s = s .. math.floor(this.Efficiency*100)..'%'\n   s = s ..' | '.. this.RemainingTime\n   s = s ..' | '.. this.State\n   s = s ..' | '.. this.CyclesCompleted\n   s = s ..' | '.. math.floor(this.Uptime)\n   s = s ..' | '.. this.Outputs.Item.DisplayName\n   s = s ..' | '.. this.Outputs.Item.Description\n   return s\nend\n\nfunction IndustryCreateRenderInput(this,n,name)\n   local s = 'I'..'#'..n..'#'\n   s = s .. name\n   s = s ..'#'.. math.floor(this.Efficiency*100)\n   s = s ..'#'.. Ternary(this.StopRequested, 8, this.State)\n   s = s ..'#'.. this.Outputs.Item[1].DisplayName\n   s = s ..'#'.. this.Outputs.Item[1].Description\n   s = s ..'#'.. math.floor(this.CyclesCompleted)\n   s = s ..'#'.. math.floor(this.Uptime)\n    \n   for k,v in ipairs(this.Inputs.Item) do\n       if k == 1 then\n          s = s ..'#'..this.Inputs.Item[k].DisplayName\n       else\n          s = s ..'~'..this.Inputs.Item[k].DisplayName\n       end\n   end\n    \n   for k,v in ipairs(this.Outputs.Item) do\n       if k == 1 then\n          s = s ..'#'..this.Outputs.Item[k].DisplayName\n       else\n          s = s ..'~'..this.Outputs.Item[k].DisplayName\n       end\n   end\n   \n   if this.Bank.Item ~= nil then\n        \n      --system.print(\"this.Bank.Item was not nil\")\n      local tableEmpty = false\n        \n      if next(this.Bank.Item) == nil then\n         tableEmpty = true\n         --system.print(\"was empty\")\n      end\n        \n      if tableEmpty == false then\n         for k,v in ipairs(this.Bank.Item) do\n             if k == 1 then\n                 s = s ..'#'..this.Bank.Item[k].DisplayName ..'@'..this.Bank.Item[k].Quantity\n                 --system.print(s)\n             else\n                 s = s ..'~'..this.Bank.Item[k].DisplayName ..'@'..this.Bank.Item[k].Quantity\n                 --system.print(s)\n             end\n         end   \n      else\n         --system.print(\"this.Bank.Item was nil\")\n         s = s .. '#taco'     \n      end\n   else\n      s = s .. '#taco'\n   end\n    \n    s = s .. '#'..nextMaintian\n    s = s .. '#'..nextBatch\n   return s\nend\n\nfunction GetBank(this)\n   local t = {}\n    --system.print(this[1].id..'TTT')\n    t.Item = GetSchem(this)\n   return t\nend\n\nfunction GetInput(this)\n   local t = {}\n    t.Item = GetItem(this)\n   return t\nend\n\nfunction GetOutput(this)\n   local t = {}\n    t.Item = GetItem(this)\n   return t\nend\n\nfunction GetItem(this)\n   local i = {}\n   local t = {}\n    \n   for k,v in ipairs(this) do\n      local st = {} \n      i = system.getItem(tonumber(this[k].id))\n\n      st.Id = i.id\n      st.Name = i.name\n      st.DisplayName = i.displayName\n      st.LocDisplayName = i.locDisplayName\n      st.DisplayNameWithSize = i.displayNameWithSize\n      st.Description = i.description\n      st.LocDescription = i.locDescription\n      st.Type = i.type\n      st.UnitMass = i.unitMass\n      st.UnitVolume = i.unitVolume\n      st.Tier = i.tier\n      st.Scale = i.scale\n      st.IconPath = i.iconPath\n      st.Schematics = i.schematics\n      st.Quantity = this[k].quantity\n     t[k] = st\n   end\n   return t\nend -- getRecipes\n\nfunction GetSchem(this)\n   local i = {}\n   local t = {}\n    \n   for k,v in ipairs(this) do\n      local st = {}  \n      i = system.getItem(tonumber(this[k].id))\n\n      st.Id = i.id\n      st.Name = i.name\n      st.DisplayName = i.displayName\n      st.LocDisplayName = i.locDisplayName\n      st.DisplayNameWithSize = i.displayNameWithSize\n      st.Description = i.description\n      st.LocDescription = i.locDescription\n      st.Type = i.type\n      st.UnitMass = i.unitMass\n      st.UnitVolume = i.unitVolume\n      st.Tier = i.tier\n      st.Scale = i.scale\n      st.IconPath = i.iconPath\n      st.Schematics = i.schematics\n      st.Quantity = this[k].quantity\n     t[k] = st\n   end\n   return t\nend -- getRecipes","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"7"}],"methods":[],"events":[]}